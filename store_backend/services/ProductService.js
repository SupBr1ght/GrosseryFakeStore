const { default: mongoose } = require("mongoose");
const Product = require("../models/Product");

const createProduct = async (product) => {
  console.log("product that send's to mongoDB:", product); // –õ–æ–≥—É–≤–∞–Ω–Ω—è
  const newProduct = new Product(product);
  await newProduct.save();

  console.log("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä:", newProduct); // –õ–æ–≥ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω

  return await Product.findById(newProduct._id)
    .select("-createdAt -updatedAt -__v")
    .lean(); // `lean()` –∑–º—É—à—É—î MongoDB –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —á–∏—Å—Ç–∏–π JS-–æ–±'—î–∫—Ç
};

const createMultipleProducts = async (products) => {
  console.log("Arrays of products into MongoDB", products);
  return await Product.insertMany(products, { rawResult: true });
};

const getAllProducts = async () => {
  console.log("Running function");
  return await Product.find({}).select("-__v").lean();
};

const getUniqueProductById = async (id) => {
  console.log("üü¢ –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –∑–∞ ID:", id);
  console.log("–¢–∏–ø ID:", typeof id);
  console.log("running method ");

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ ID –≤–∞–ª—ñ–¥–Ω–∏–π
  if (!mongoose.isValidObjectId(id)) {
    // üî• –¢—É—Ç –±—É–ª–æ `if (mongoose.isValidObjectId(id))`, –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!
    console.log("‚ùå Invalid ID format:", id);
    return null;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É ObjectId —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –∑–º—ñ–Ω–Ω—É
  const objectId = new mongoose.Types.ObjectId(id);
  console.log("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π ObjectId:", objectId);

  // –®—É–∫–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç —É –±–∞–∑—ñ
  const product = await Product.findById(objectId).select("-__v").lean();

  if (!product) {
    console.log("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ!");
  } else {
    console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç:", product);
  }

  return product;
};
module.exports = {
  createProduct,
  createMultipleProducts,
  getAllProducts,
  getUniqueProductById,
};
